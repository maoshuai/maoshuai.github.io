<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>maoshuai blog</title>
    <description></description>
    <link>http://maoshuai.github.io/</link>
    <atom:link href="http://maoshuai.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 26 Aug 2015 21:22:14 +0800</pubDate>
    <lastBuildDate>Wed, 26 Aug 2015 21:22:14 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>简单shell日志框架simpleLog4sh</title>
        <description>&lt;p&gt;simpleLog4sh是我从之前写的shell脚本里提取的shell日志工具类。简单改进以后，形成极为简单的shell日志框架。目前发布在GitHub上： 
&lt;a href=&quot;https://github.com/maoshuai/simpleLog4sh&quot;&gt;https://github.com/maoshuai/simpleLog4sh&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;简介&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;simpleLog4sh&lt;/strong&gt;是一个极为简单的shell日志框架，甚至不应该叫日志框架。&lt;br /&gt;
与其他shell日志框架不同，它仅仅是一个：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;只有几十行的纯shell脚本，没有任何依赖&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;但通过简单的封装，这个小shell可以提供诸如：&lt;br /&gt;
1. logInfo，logDebug等多级别日志输出&lt;br /&gt;
2. 日志记录带有时间戳和日志级别&lt;br /&gt;
3. 将日志输出到指定文件&lt;br /&gt;
4. 日志文件按日期进行归档 &lt;br /&gt;
5. 抛出异常&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;simpleLog4sh&lt;/strong&gt;不期望做到像Apache日志框架一样复杂，仅仅在您写toy小程序的时候，能帮助你实现最简单的日志功能，而不必总是echo。&lt;/p&gt;

&lt;p&gt;您通过下面的语句，：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
logInfo hello, world
logDebug &quot;hello, world&quot; # 推荐将所有的内容用双引号包围
&lt;/code&gt;
输出内容举例如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
2015-08-26 20:12:21 [test.sh] (INFO) hello, world
2015-08-26 20:12:21 [test.sh] (DEBUG) hello, world
&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;使用方法举例&lt;/h1&gt;
&lt;p&gt;## 导入simpleLog4sh
在您的shell开头导入即可，可以参考/test/test.sh的中的用法：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
. ../src/simplelog4sh.sh
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;logxxx&quot;&gt;logXXX语句&lt;/h2&gt;
&lt;p&gt;simpleLog4sh提供了四个日志级别的方法，他们分别是&lt;br /&gt;
1. &lt;code&gt;logDebug&lt;/code&gt;&lt;br /&gt;
2. &lt;code&gt;logInfo&lt;/code&gt;&lt;br /&gt;
3. &lt;code&gt;logWarn&lt;/code&gt; &lt;br /&gt;
4. &lt;code&gt;logError&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;用法很简单，所有的参数都会被当做日志内容记录，比如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
logInfo hello, world
logDebug &quot;hello, world&quot; # 推荐将所有的内容用双引号包围
&lt;/code&gt;
输出内容举例如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
2015-08-26 20:03:18 [test.sh] (INFO) hello, this logInfo
2015-08-26 20:12:21 [test.sh] (DEBUG) hello, logDebug
2015-08-26 20:12:21 [test.sh] (INFO) hello, logInfo
2015-08-26 20:12:21 [test.sh] (WARN) hello, logWarn
2015-08-26 20:12:21 [test.sh] (ERROR) hello, logError
2015-08-26 20:12:21 [test.sh] (ECHO) hello, myEcho
2015-08-26 20:12:21 [test.sh] (ECHO_ERROR) hello, myEchoError
2015-08-26 20:13:26 [test.sh] (DEBUG) hello, logDebug
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;设置日志级别&lt;/h2&gt;
&lt;p&gt;simpleLog4sh支持6个日志级别，含义与Apache日志框架类似：&lt;br /&gt;
1. ALL&lt;br /&gt;
2. DEBUG&lt;br /&gt;
3. INFO&lt;br /&gt;
4. WARN&lt;br /&gt;
5. ERROR&lt;br /&gt;
6. OFF&lt;/p&gt;

&lt;p&gt;如果要设置指定的日志级别，请在导入simpleLogsh之后，export变量&lt;code&gt;LOG_LEVEL&lt;/code&gt;，可设置为如下预置常量：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
LOG_LEVEL_ALL  
LOG_LEVEL_DEBUG  
LOG_LEVEL_INFO  
LOG_LEVEL_WARN  
LOG_LEVEL_ERROR  
LOG_LEVEL_OFF  
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;throw&quot;&gt;throw语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;throw&lt;/code&gt;语句类似java语言中抛异常。通过使用&lt;code&gt;throw&lt;/code&gt;语句，达到类似抛异常的效果。比如：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
throw &quot;ParamsNumberException: need 2 params&quot;
&lt;/code&gt;
使用throw语句，程序将在stderr输出上述语句，同时在日志文件以LOG_LEVEL_ERROR级别记录。最后程序会意退出码1退出。&lt;/p&gt;

&lt;h2 id=&quot;myechomyechoerror&quot;&gt;myEcho与myEchoError语句&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;myEcho&lt;/code&gt;和&lt;code&gt;myEchoError&lt;/code&gt;与shell的&lt;code&gt;echo&lt;/code&gt;语句类似，但有两点增强：&lt;br /&gt;
1. &lt;code&gt;myEcho&lt;/code&gt;和&lt;code&gt;myEchoError&lt;/code&gt;不仅会输出到控制台，还会输出到日志文件。&lt;br /&gt;
2. &lt;code&gt;myEchoError&lt;/code&gt;的输出是stdErr&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;日志路径与日志文件滚动&lt;/h2&gt;
&lt;p&gt;默认程序的输出日志路径是&lt;code&gt;/tmp/simplelog4sh&lt;/code&gt;，并在此目录下面生成已当前日期命名的日志文件，类似如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
-rw-r--r--  1 maoshuai  wheel  1839  8 25 23:48 log_20150825.log
-rw-r--r--  1 maoshuai  wheel  1839  8 26 20:32 log_20150826.log
&lt;/code&gt;
当然，你可以通过export变量&lt;code&gt;SIMPLE_LOG_4_SH_DIR&lt;/code&gt;指定你的日志路径，替换上述默认值。比如：&lt;code&gt;export SIMPLE_LOG_4_SH_DIR=/var/log&lt;/code&gt;，则所有日志都打印到&lt;code&gt;/var/log&lt;/code&gt;目录下面&lt;/p&gt;

</description>
        <pubDate>Thu, 27 Aug 2015 05:17:00 +0800</pubDate>
        <link>http://maoshuai.github.io/post/simpleLog4sh.html</link>
        <guid isPermaLink="true">http://maoshuai.github.io/post/simpleLog4sh.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>为静态博客增加评论插件</title>
        <description>&lt;p&gt;经过上周末的努力，jekyll搭建的静态博客已经形成。但作为一个交流平台，总希望能有互动，也就是评论。&lt;/p&gt;

&lt;p&gt;传统上，都是在自己的服务器实现，比如&lt;code&gt;WordPress&lt;/code&gt;，但既然选择了静态博客，&lt;em&gt;你就失去了服务器端的能力&lt;/em&gt;。
但还好，有各种社会化评论插件，通过简单的JavaScript即可完成强大的评论功能。所有评论内容，都托管在第三方平台。十分方便。&lt;/p&gt;

&lt;p&gt;比较常见的有国外的Disqus，国内的多说、友言、搜狐畅言。&lt;br /&gt;
并且，这些社会化评论插件，远远超过了简单的评论及回复功能。增添了诸如：社交账号登陆、网站统计等实用功能。&lt;/p&gt;

&lt;p&gt;我简单的比较了之后，最终选择了“搜狐畅言”，也就是您现在在文章下方看到的。&lt;br /&gt;
选择搜狐畅言，主要基于几点考虑：&lt;br /&gt;
1. 国内访问更快。&lt;br /&gt;
2. 支持国内的社交平台。&lt;br /&gt;
3. 搜狐公司出品，相对更可靠些吧。当然，也许只是我天真的愿望吧。&lt;/p&gt;

&lt;p&gt;先不说好坏，重要的是开始，并且是立即开始。不排除观察一段时间转换的可能。&lt;br /&gt;
好在，我看畅言&lt;code&gt;支持数据导出&lt;/code&gt;，这点非常重要，否则你只能在一棵树上吊死，不是我希望的。&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 07:03:00 +0800</pubDate>
        <link>http://maoshuai.github.io/post/crete-blog-comment-plugin.html</link>
        <guid isPermaLink="true">http://maoshuai.github.io/post/crete-blog-comment-plugin.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>初步搭建我的GitHub Pages</title>
        <description>&lt;p&gt;记得上一次持续写博客还是在大学的时候，一晃都五年了，当年那个坚持劲儿，因为毕业的原因中断了，竟再也没有重试起来。&lt;br /&gt;
也算自己孤陋寡闻，竟不知道GitHub也可以放置静态博客了。加上一些静态网页生成器，托管个人博客，简直是实惠、稳定又有逼格。&lt;br /&gt;
尤其是对程序员来说，GitHub就是自己的Facebook，不稍微打扮一下，都不好意思见人了。&lt;/p&gt;

&lt;p&gt;花了一个周末的时间，将git复习了一遍，然后用Jekyll将这个GitHub Page搭建起来，以后就有了自己的新家了。&lt;/p&gt;

&lt;p&gt;要能愉快的在GitHub上写博客，需要掌握几项不大不小的技能：&lt;br /&gt;
1. git基本操作&lt;br /&gt;
2. Markdown语法，用来在Jekyll里面书写比较美观的博客。&lt;br /&gt;
3. ruby和rubyGems，稍微了解，用来安装Jekyll&lt;br /&gt;
4. yaml标记语言，Jekyll用得到&lt;br /&gt;
5. liquid模板语言。&lt;/p&gt;

&lt;p&gt;总之，技多不压身。这些年荒废的，都要一点点补回来。&lt;br /&gt;
行走江湖，得有一门手艺，这样，到哪里都有一口饭吃。&lt;/p&gt;

&lt;p&gt;接下来的博客计划，希望不要拖太久：&lt;br /&gt;
1. 如果你是程序员，相信我，需要一台Macbook。&lt;br /&gt;
2. Shell编程备忘录&lt;br /&gt;
3. vi和和正则表达式，撬开Linux大门的第一板斧 &lt;br /&gt;
4. awk与sed基础用法&lt;br /&gt;
4. Python初探&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Aug 2015 04:57:11 +0800</pubDate>
        <link>http://maoshuai.github.io/post/create-blog.html</link>
        <guid isPermaLink="true">http://maoshuai.github.io/post/create-blog.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
